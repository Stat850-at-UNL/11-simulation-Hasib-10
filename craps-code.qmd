---
title: "Craps Simulation"
format: html
---


In this document, you should create, code, and demonstrate each function you described in [`pseudocode.qmd`](pseudocode.qmd).
File your functions under the appropriate header. 
Each function should have its own code chunk, which is properly set up with the appropriate programming language indicated.
I have provided skeleton code chunks for your required functions using R syntax, but you are free to use Python or any other language covered in class. 
Please delete or fill in my chunks with your own code.

Make sure this document compiles before you submit your answers.

# Helper Functions

## `roll_dice`

```{r warning=FALSE, message=FALSE}
library(tidyverse)
roll_dice <- function() {
  sum(sample(1:6, 2, replace = TRUE))
}

```

```{r}
roll_dice()
```



# Main Functions

## `simulate_craps_game`
```{r}
simulate_craps_game <- function() {
  game_results <- data.frame(
    id = integer(),     
    roll = integer(), 
    outcome = character() 
  )
  roll <- roll_dice()
  roll_id <- 1
  if (roll %in% c(7, 11)) {
    game_results <- rbind(game_results, data.frame(
      id = roll_id,
      roll = roll,
      outcome = "win"
    ))
    return(game_results)
  } else if (roll %in% c(2, 3, 12)) {
    game_results <- rbind(game_results, data.frame(
      id = roll_id,
      roll = roll,
      outcome = "lose"
    ))
    return(game_results)
  }
  point <- roll
  game_results <- rbind(game_results, data.frame(
    id = roll_id,
    roll = roll,
    outcome = "continue"
  ))
  
  while (TRUE) {
    roll <- roll_dice()
    roll_id <- roll_id + 1
    if (roll == point) {
      outcome <- "win"
    } else if (roll == 7) {
      outcome <- "lose"
    } else {
      outcome <- "continue"
    }
    game_results <- rbind(game_results, data.frame(
      id = roll_id,
      roll = roll,
      outcome = outcome
    ))
    if (outcome != "continue") {
      break
    }
  }
  
  return(game_results)
}

```

```{r}
simulate_craps_game()
```

## `summarize_craps_game`
```{r}
summarize_craps_game <- function(game_data) {
  n_rolls <- nrow(game_data)                        
  point <- ifelse(game_data$outcome[1] == "continue", 
                  game_data$roll[1], NA)            
  outcome <- game_data$outcome[n_rolls]           
  
  data.frame(
    n_rolls = n_rolls,
    point = point,
    outcome = outcome
  )
}

```

```{r}
game <- simulate_craps_game()
summarize_craps_game(game)
```

## `run_craps_simulation`
```{r}
run_craps_simulation <- function(N) {
  summaries <- lapply(1:N, function(x) {
    game <- simulate_craps_game()
    summarize_craps_game(game)
  })
  
  do.call(rbind, summaries)
}


```

```{r}
result <- run_craps_simulation(10)
win_lose_percentage <- result %>%
  group_by(outcome) %>%
  summarise(count = n(), percentage = paste0(round(count / nrow(result) * 100, 2), "%"))
print(result)
print(win_lose_percentage)
```

